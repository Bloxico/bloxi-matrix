system: Chain
subsystem: Syncer
features:
  - name: Check Bad
    behaviors:
      - id: CHAIN_SYNCER_CHECK_BAD_001
        description: |
          Given a known block CID,
          return 'true' if it was marked as bad and the reason why
  
  - name: Checkpoint
    behaviors:
      - id: CHAIN_SYNCER_CHECKPOINT_001
        description: |
          Given a known Tipset key, 
          mark those blocks as "checkpointed", meaning that it won't ever fork away from it
  
  - name: Incoming Blocks
    behaviors:
      - id: CHAIN_SYNCER_INCOMING_BLOCKS_001
        description: |
          Returns a channel streaming incoming, potentially not yet synced block headers
  
  - name: Mark Bad
    behaviors:
      - id: CHAIN_SYNCER_MARK_BAD_001
        description: |
          Given a known block CID, 
          mark it as bad, meaning that it won't ever be synced
  
  - name: State
    behaviors:
      - id: CHAIN_SYNCER_STATE_001
        description: Returns a list of sync states for each sync worker of the local node
  
  - name: Sync Submit Block
    behaviors:
      - id: SYNC_SUBMIT_BLOCK_001
        description: Given a newly created block, submit it to the network through the
          local node
  
  - name: Unmark All Bad
    behaviors:
      - id: CHAIN_SYNCER_UNMARK_ALL_BAD_001
        description: Unmarks all blocks marked as bad, making them possible to sync
  
  - name: Unmark Bad
    behaviors:
      - id: CHAIN_SYNCER_UNMARK_BAD_001
        description: |
          Given a CID of a block that's marked as bad, 
          unmark it, making it possible to be validated and synced again
  
  - name: Validate Tipset
    behaviors:
      - id: CHAIN_SYNCER_VALIDATE_TIPSET_001
        description: |
          Given a known Tipset key,
          return if the specified tipset is valid or not

  - name: Load Genesis
    behaviors:
      - id: CHAIN_SYNCER_LOAD_GENESIS_001
        description: |
          Load and return the Genesis block from the ChainStore
      - id: CHAIN_SYNCER_LOAD_GENESIS_002
        description: |
          Given that the Genesis can't be loaded from the ChainStore,
          throw an error

  - name: Start
    behaviors:
      - id: CHAIN_SYNCER_START_001
        description: |
          Start syncing the chain (see "Handle New Peer Head" below) in the background
          and record metrics about current and expected height
  
  - name: Stop
    behaviors:
      - id: CHAIN_SYNCER_STOP_001
        description: |
          Stop syncing the chain and recording metrics

  - name: Handle New Peer Head
    behaviors:
      - id: CHAIN_SYNCER_NEW_PEER_HEAD_001
        description: |
          Given that we have enough peers and we received a new peer head,
          set the new head as "target" and spawn a new sync worker.
          See "Sync" below for expected worker behavior.
      - id: CHAIN_SYNCER_NEW_PEER_HEAD_002
        description: |
          Given that we don't have enough peers and we received a new peer head,
          track the new head and wait until we have enough peers

  - name: Sync
    behaviors:
      - id: CHAIN_SYNCER_SYNC_001
        description: |
          Given a new peer head > current heaviest tipset,
          collect the chain from the current tipset up to the new peer head (see "Collect Chain"),
          and persist it to the chain store.
      - id: CHAIN_SYNCER_SYNC_002
        description: |
          Given that the chain can't be collected,
          report and set the status of the current sync worker to the error returned by "Collect Chain"
      - id: CHAIN_SYNCER_SYNC_003
          Given that new tipsets can't be persisted to the chain store,
          report and set the status of the current sync worker to the error returned by the chain store

  - name: Collect Chain
    behaviors:
      - id: CHAIN_SYNCER_COLLECT_CHAIN_001
        description: |
          Given the current and the highest known tipsets,
          request block headers from peers (see "Collect Headers"), moving back until we reach a common tipset.
          If the common tipset is our head, treat the sync as a "fast-forward", else treat it as a fork.
          Persist the new Block headers to the blockstore, then fetch the full blocks, including the messages and persist them to the blockstore.
      - id: CHAIN_SYNCER_COLLECT_CHAIN_002
        description: |
          Given that the new block headers can't be persisted,
          throw an error and abort the sync process.
      - id: CHAIN_SYNCER_COLLECT_CHAIN_003
        description: |
          Given that the full bocks and messages can't be persisted,
          throw an error and abort the sync process

  - name: Collect Headers
    behaviors: 
      - id: CHAIN_SYNCER_COLLECT_HEADERS_001
        description: |
          Given the heaviest ("incoming") and the current ("anchor") tipsets,
          traverse the chain backwards from the heaviest tipset,
          check which portions of the chain are in our chain store, and retrieve the others from the network (see "Fetch Tipset").
          Check the consistency of beacon entries from the tipset.
          Query the peers in batches, requesting up to a max of 500 tipsets every time.
          Once concluded, if we find a mismatching tipset at the height where the anchor tipset should be,
          invoke "Sync Fork"
      - id: CHAIN_SYNCER_COLLECT_HEADERS_002
        description: |
          Given any portion of the chain received from the network is on the local denylist,
          short circuit and abort the collection process for the current chain.
      - id: CHAIN_SYNCER_COLLECT_HEADERS_003
        description: |
          Given that the beacon entries are inconsistent (in the wrong order),
          short circuit and abort the sync process for the current chain

  - name: Sync fork
    behaviors:
      - id: CHAIN_SYNCER_SYNC_FORK_001
        description: |
          Given (forked) incoming and known tipsets,
          try to obtain the chain fragment that links a fork into a common known ancestor in our view of the chain.
      - id: CHAIN_SYNCER_SYNC_FORK_002
        description: |
          Given that the fork is too long, or it would cause us to diverge from the checkpoint,
          add the entire subchain to the denylist.

  - name: Validate Message Metadata
    behaviors:
      - id: CHAIN_SYNCER_VALIDATE_MESSAGE_META_001
        description: |
          Given a full block,
          perform structural and content hash validation of messages within the block,
          and if validation passes, store the messages in the underlying IPLD blockstore

  - name: Fetch Tipset
    behaviors:
      - id: CHAIN_SYNCER_FETCH_TIPSET_001
        description: |
          Given a tipset key and a peer ID,
          try to lead the given tipset from the store, and fallback to querying the client with the given peer ID
          if the tipset is not found locally.

  - name: Validate Block
    behaviors:
      - id: CHAIN_SYNCER_VALIDATE_BLOCK_001
        description: |
          Given a full block,
          perform semantic validation documented in 
          https://github.com/filecoin-project/lotus/blob/main/documentation/en/block-validation.md